import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# ===================== –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ =====================
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("TOKEN not found in .env file")

# ===================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====================
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ===================== –°–æ—Å—Ç–æ—è–Ω–∏—è =====================
class AdForm(StatesGroup):
    title = State()
    photos = State()
    address = State()
    description = State()
    rent_or_own = State()
    revenue = State()
    profit = State()
    staff_count = State()
    finance_file = State()
    price = State()
    category = State()
    contact = State()

# ===================== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ =====================
categories = {
    "–£—Å–ª—É–≥–∏": "üõ†",
    "–ü—É–Ω–∫—Ç—ã–í—ã–¥–∞—á–∏": "üì¶",
    "–ë—å—é—Ç–∏": "üíÑ",
    "–ì–ê–ë": "üè¢",
    "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": "üè≠",
    "–û–±—â–µ–ø–∏—Ç": "üçΩ",
    "–¢–æ–≤–∞—Ä–Ω—ã–π–ë–∏–∑–Ω–µ—Å": "üì¶",
    "–ê–≤—Ç–æ–±–∏–∑–Ω–µ—Å": "üöó"
}

# ===================== –ì—Ä–∞–¥–∞—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ =====================
price_tags = [
    ("–¥–æ500—Ç", 0, 500_000),
    ("–¥–æ1–º–ª–Ω", 500_001, 1_000_000),
    ("–¥–æ1.5–º–ª–Ω", 1_000_001, 1_500_000),
    ("–¥–æ2–º–ª–Ω", 1_500_001, 2_000_000),
    ("–¥–æ3–º–ª–Ω", 2_000_001, 3_000_000),
    ("–¥–æ5–º–ª–Ω", 3_000_001, 5_000_000),
]

# ===================== –°—Ç–∞—Ä—Ç =====================
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("/new"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n"
        "–í—ã –±—É–¥–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø–æ—à–∞–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ –≤ –∏—Ç–æ–≥–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /new, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=kb
    )

# ===================== 1. –ù–∞–∑–≤–∞–Ω–∏–µ =====================
@dp.message_handler(commands=['new'])
async def process_title(message: types.Message):
    await AdForm.title.set()
    await message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:\n<i>–ö—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤</i>")

@dp.message_handler(state=AdForm.title)
async def title_entered(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await AdForm.photos.set()
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –±–∏–∑–Ω–µ—Å–∞. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

# ===================== 2. –§–æ—Ç–æ =====================
@dp.message_handler(lambda message: message.text and message.text.lower() == "–≥–æ—Ç–æ–≤–æ", state=AdForm.photos)
async def photos_done(message: types.Message, state: FSMContext):
    await AdForm.address.set()
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:\n<i>–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å —Å –≥–æ—Ä–æ–¥–æ–º –∏ —É–ª–∏—Ü–µ–π</i>")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=AdForm.photos)
async def photo_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    await message.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

# ===================== 3. –ê–¥—Ä–µ—Å =====================
@dp.message_handler(state=AdForm.address)
async def address_entered(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await AdForm.description.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:\n<i>–ö—Ä–∞—Ç–∫–æ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –±–∏–∑–Ω–µ—Å–∞, —Ä–æ—Å—Ç–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö</i>")

# ===================== 4. –û–ø–∏—Å–∞–Ω–∏–µ =====================
@dp.message_handler(state=AdForm.description)
async def description_entered(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await AdForm.rent_or_own.set()
    await message.answer("üè† –ê—Ä–µ–Ω–¥–∞ –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?\n<i>–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∏–ª–∏ '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'</i>")

# ===================== 5. –ê—Ä–µ–Ω–¥–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å =====================
@dp.message_handler(state=AdForm.rent_or_own)
async def rent_entered(message: types.Message, state: FSMContext):
    await state.update_data(rent_or_own=message.text)
    await AdForm.revenue.set()
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –≤—ã—Ä—É—á–∫—É:\n<i>–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</i>")

# ===================== 6. –í—ã—Ä—É—á–∫–∞ =====================
@dp.message_handler(state=AdForm.revenue)
async def revenue_entered(message: types.Message, state: FSMContext):
    await state.update_data(revenue=message.text)
    await AdForm.profit.set()
    await message.answer("üìà –£–∫–∞–∂–∏—Ç–µ —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å:\n<i>–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</i>")

# ===================== 7. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å =====================
@dp.message_handler(state=AdForm.profit)
async def profit_entered(message: types.Message, state: FSMContext):
    await state.update_data(profit=message.text)
    await AdForm.staff_count.set()
    await message.answer("üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n<i>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —à—Ç–∞—Ç–µ</i>")

# ===================== 8. –ö–æ–ª-–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ =====================
@dp.message_handler(state=AdForm.staff_count)
async def staff_entered(message: types.Message, state: FSMContext):
    await state.update_data(staff_count=message.text)
    await AdForm.finance_file.set()
    await message.answer(
        "üìä –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å (.xlsx) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.\n"
        "<i>–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ç–∞–π–Ω–æ–π</i>\n"
        "–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: https://docs.google.com/spreadsheets/d/1Vcn68ThO7yEWCQdLTZAsWVQc5c-V19B0wNLo0zIx_og/edit?usp=sharing"
    )

# ===================== 9. –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å =====================
@dp.message_handler(content_types=types.ContentType.DOCUMENT, state=AdForm.finance_file)
async def finance_received(message: types.Message, state: FSMContext):
    await state.update_data(finance_file=message.document.file_id)
    await AdForm.price.set()
    await message.answer("üíµ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞:\n<i>–£–∫–∞–∂–∏—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—É—é —Ü–µ–Ω—É</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", state=AdForm.finance_file)
async def finance_skipped(message: types.Message, state: FSMContext):
    await state.update_data(finance_file=None)
    await AdForm.price.set()
    await message.answer("üíµ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞:\n<i>–£–∫–∞–∂–∏—Ç–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—É—é —Ü–µ–Ω—É</i>")

# ===================== 10. –°—Ç–æ–∏–º–æ—Å—Ç—å =====================
@dp.message_handler(state=AdForm.price)
async def price_entered(message: types.Message, state: FSMContext):
    price_text = message.text.replace(" ", "").replace("—Ç", "000")
    price_number = int(''.join(filter(str.isdigit, price_text)))
    tag = None
    for t, low, high in price_tags:
        if low <= price_number <= high:
            tag = t
            break
    await state.update_data(price=message.text, price_tag=tag)
    await AdForm.category.set()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for c in categories.keys():
        kb.add(c)
    await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞:", reply_markup=kb)

# ===================== 11. –ö–∞—Ç–µ–≥–æ—Ä–∏—è =====================
@dp.message_handler(state=AdForm.category)
async def category_entered(message: types.Message, state: FSMContext):
    category = message.text.replace(" ", "")
    if category not in categories:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(category=category)
    await AdForm.contact.set()
    await message.answer("üìû –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º:\n<i>–¢–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email</i>")

# ===================== 12. –ö–æ–Ω—Ç–∞–∫—Ç =====================
@dp.message_handler(state=AdForm.contact)
async def contact_entered(message: types.Message, state: FSMContext):
    contact = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    if not contact:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email.")
        return

    await state.update_data(contact=contact)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    text = f"üè∑Ô∏è <b>{data['title']}</b>\n" \
           f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n" \
           f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n" \
           f"üè† –ê—Ä–µ–Ω–¥–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: {data['rent_or_own']}\n" \
           f"üí∞ –í—ã—Ä—É—á–∫–∞: {data['revenue']}\n" \
           f"üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {data['profit']}\n" \
           f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {data['staff_count']}\n" \
           f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å: {'–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if data.get('finance_file') else '–Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ'}\n" \
           f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']}\n" \
           f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n" \
           f"#{data['category']} #{data.get('price_tag', '')}"

    # ===================== –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª =====================
    CHANNEL_ID = -1002077624751  # ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        if data.get("photos"):
            media = [
                InputMediaPhoto(
                    media=p,
                    caption=text if i == 0 else ""
                ) for i, p in enumerate(data["photos"])
            ]
            await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        else:
            await bot.send_message(chat_id=CHANNEL_ID, text=text)

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if data.get("finance_file"):
            await bot.send_document(
                chat_id=CHANNEL_ID,
                document=data["finance_file"],
                caption="üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å"
            )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        await state.finish()
        return

    await message.answer("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.finish()

# ===================== –ó–∞–ø—É—Å–∫ =====================
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)